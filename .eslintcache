[{"/Users/okesseko/Documents/GitHub/software-calender/src/App.tsx":"1","/Users/okesseko/Documents/GitHub/software-calender/src/component/reservation.tsx":"2","/Users/okesseko/Documents/GitHub/software-calender/src/index.js":"3","/Users/okesseko/Documents/GitHub/software-calender/src/component/login.tsx":"4","/Users/okesseko/Documents/GitHub/software-calender/src/component/drawBar.tsx":"5","/Users/okesseko/Documents/GitHub/software-calender/src/component/home.tsx":"6","/Users/okesseko/Documents/GitHub/software-calender/src/component/personal.tsx":"7"},{"size":2119,"mtime":1609944324443,"results":"8","hashOfConfig":"9"},{"size":6081,"mtime":1609250461557,"results":"10","hashOfConfig":"9"},{"size":177,"mtime":1609146839705,"results":"11","hashOfConfig":"9"},{"size":4787,"mtime":1609134143153,"results":"12","hashOfConfig":"9"},{"size":11866,"mtime":1609946572275,"results":"13","hashOfConfig":"9"},{"size":2282,"mtime":1609247836525,"results":"14","hashOfConfig":"9"},{"size":3995,"mtime":1609245439483,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1d12a5q",{"filePath":"18","messages":"19","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/Users/okesseko/Documents/GitHub/software-calender/src/App.tsx",["34"],"/Users/okesseko/Documents/GitHub/software-calender/src/component/reservation.tsx",["35","36","37","38","39","40","41","42","43","44","45","46","47","48"],"import * as React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n  ViewState,\n  EditingState,\n  GroupingState,\n  IntegratedGrouping,\n  IntegratedEditing,\n} from \"@devexpress/dx-react-scheduler\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport {\n  Scheduler,\n  WeekView,\n  MonthView,\n  DayView,\n  Appointments,\n  DateNavigator,\n  ViewSwitcher,\n  AppointmentForm,\n  AppointmentTooltip,\n  TodayButton,\n  AllDayPanel,\n  Toolbar,\n  EditRecurrenceMenu,\n  ConfirmationDialog,\n  Resources,\n  GroupingPanel,\n  CurrentTimeIndicator,\n} from \"@devexpress/dx-react-scheduler-material-ui\";\n\nimport moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { Button, Fab, IconButton } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\ninterface propType {\n  currenTime: any;\n  setCurrenTime: any;\n  resource: any;\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst basic = [\n  {\n    title: \"Website Re-Design Plan\",\n    startDate: moment().subtract(2, \"hours\").toISOString(),\n    endDate: moment().add(2, \"hours\").toISOString(),\n    id: 1,\n    location: \"Room 1\",\n    members: [1, 2],\n    roomId: 1,\n  },\n  {\n    title: \"Book Flights to San Fran for Sales Trip\",\n    startDate: moment().subtract(10, \"hours\").toISOString(),\n    endDate: moment().subtract(1, \"hours\").toISOString(),\n    id: 2,\n    location: \"Room 2\",\n    members: [1, 2],\n    roomId: 2,\n  },\n  {\n    title: \"Book Flights to San Fran for Sales Trip\",\n    startDate: moment().subtract(10, \"hours\").toISOString(),\n    endDate: moment().subtract(1, \"hours\").toISOString(),\n    id: 3,\n    location: \"Room 3\",\n    members: [1, 2],\n    roomId: 3,\n  },\n  {\n    title: \"Book Flights to San Fran for Sales Trip\",\n    startDate: moment().subtract(10, \"hours\").toISOString(),\n    endDate: moment().subtract(1, \"hours\").toISOString(),\n    id: 4,\n    location: \"Room 4\",\n    members: [1, 2],\n    roomId: 4,\n  },\n  {\n    title: \"Book Flights to San Fran for Sales Trip\",\n    startDate: moment().subtract(10, \"hours\").toISOString(),\n    endDate: moment().subtract(1, \"hours\").toISOString(),\n    id: 5,\n    location: \"Room 5\",\n    members: [1, 2],\n    roomId: 5,\n  },\n  {\n    title: \"Book Flights to San Fran for Sales Trip\",\n    startDate: moment().subtract(10, \"hours\").toISOString(),\n    endDate: moment().subtract(1, \"hours\").toISOString(),\n    id: 6,\n    location: \"Room 6\",\n    members: [1, 2],\n    roomId: 6,\n  },\n];\n\nconst Reservation = ({\n  currenTime,\n  setCurrenTime,\n  resource,\n  open,\n  setOpen,\n}: propType) => {\n  let history = useHistory();\n  const [data, setData] = useState(basic);\n  const [formVisible, setFormVisible] = useState(false);\n  const [add, setAdd] = useState<any>();\n  const grouping = [\n    {\n      resourceName: \"roomId\",\n    },\n  ];\n  const ToolbarCustom = ({ children, style, ...restProps }: any) => {\n    return (\n      <Toolbar.Root\n        style={{ display: \"flex\", justifyContent: \"space-between\" }}\n      >\n        {!open && (\n          <IconButton\n            onClick={() => {\n              setOpen(true);\n            }}\n          >\n            <MenuIcon />\n          </IconButton>\n        )}\n        {children}\n        <IconButton\n          size=\"medium\"\n          onClick={() => {\n            history.push(\"/personal\");\n          }}\n        >\n          <AccountCircleIcon style={{ fontSize: \"36px\" }} />\n        </IconButton>\n      </Toolbar.Root>\n    );\n  };\n\n  const BooleanEditor = (props: any) => {\n    return (\n      <AppointmentForm.BooleanEditor {...props} style={{ display: \"none\" }} />\n    );\n  };\n  const TimeTableCell = ({ onDoubleClick, ...restProps }: any) => {\n    return <DayView.TimeTableCell onClick={onDoubleClick} {...restProps} />;\n  };\n  function commitChanges({ added, changed, deleted }: any) {\n    console.log(added, changed, deleted, \"iii\");\n\n    if (added) {\n      const startingAddedId =\n        data.length > 0 ? data[data.length - 1].id + 1 : 0;\n      setData([...data, { id: startingAddedId, ...added }]);\n    }\n    if (changed) {\n      setData(\n        data.map((appointment) =>\n          changed[appointment.id]\n            ? { ...appointment, ...changed[appointment.id] }\n            : appointment\n        )\n      );\n    }\n    if (deleted !== undefined) {\n      setData(data.filter((appointment) => appointment.id !== deleted));\n    }\n  }\n  return (\n    <Paper>\n      <Scheduler data={data} height={window.innerHeight}>\n        <ViewState\n          defaultCurrentDate={new Date()}\n          currentDate={currenTime}\n          onCurrentDateChange={(currentDate) => {\n            setCurrenTime(moment(currentDate));\n          }}\n        />\n        <DayView cellDuration={60} timeTableCellComponent={TimeTableCell} />\n\n        <Toolbar rootComponent={ToolbarCustom} />\n        <EditingState\n          onCommitChanges={commitChanges}\n          onEditingAppointmentChange={(editingAppointment) =>\n            setAdd(editingAppointment)\n          }\n        />\n        <GroupingState grouping={grouping} />\n\n        <Appointments />\n        {/* <CurrentTimeIndicator\n          shadePreviousCells={true}\n          shadePreviousAppointments={true}\n        /> */}\n        <Resources data={resource} mainResourceName=\"roomId\" />\n        <IntegratedGrouping />\n        <IntegratedEditing />\n\n        <AppointmentTooltip showOpenButton showCloseButton />\n        <AppointmentForm booleanEditorComponent={BooleanEditor} />\n        <GroupingPanel />\n        <ConfirmationDialog />\n        <TodayButton />\n      </Scheduler>\n      {/* <Fab\n        color=\"secondary\"\n        style={{ position: \"absolute\", right: \"16px\", bottom: \"16px\" }}\n        onClick={() => {\n          setFormVisible(true);\n          // setAdd(undefined);\n          // onAddedAppointmentChange({\n          //   startDate: moment(),\n          //   endDate: moment().add(1, \"hour\"),\n          // });\n        }}\n      >\n        <AddIcon />\n      </Fab> */}\n    </Paper>\n  );\n};\nexport default Reservation;\n","/Users/okesseko/Documents/GitHub/software-calender/src/index.js",[],"/Users/okesseko/Documents/GitHub/software-calender/src/component/login.tsx",[],"/Users/okesseko/Documents/GitHub/software-calender/src/component/drawBar.tsx",["49","50","51","52","53","54","55"],"import * as React from \"react\";\nimport {\n  Button,\n  Checkbox,\n  Divider,\n  Drawer,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n  IconButton,\n  makeStyles,\n} from \"@material-ui/core\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider, Calendar } from \"@material-ui/pickers\";\nimport { useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport {\n  blue,\n  brown,\n  green,\n  orange,\n  purple,\n  red,\n  teal,\n  indigo,\n} from \"@material-ui/core/colors\";\n\ninterface propType {\n  time: moment.Moment;\n  setTime: React.Dispatch<React.SetStateAction<moment.Moment>>;\n  resource: any;\n  setResource: any;\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\nconst useStyles = makeStyles((theme) => ({\n  calender: {\n    zIndex: 50,\n    height: \"100vh\",\n    overflowY: \"scroll\",\n  },\n  formControl: {\n    padding: `0  0 0 ${theme.spacing(3)}px `,\n    width: \"calc(100% - 24px)\",\n  },\n  menuButton: {\n    borderRadius: 0,\n  },\n}));\nconst person = [\n  {\n    text: \"Me\",\n    id: 1,\n    color: indigo,\n  },\n  {\n    text: \"Arnie\",\n    id: 2,\n    color: teal,\n  },\n];\nconst instance = [\n  {\n    text: \"Room1\",\n    id: 1,\n    color: blue,\n  },\n  {\n    text: \"Room2\",\n    id: 2,\n    color: orange,\n  },\n  {\n    text: \"Room3\",\n    id: 3,\n    color: green,\n  },\n  {\n    text: \"Room4\",\n    id: 4,\n    color: red,\n  },\n  {\n    text: \"Room5\",\n    id: 5,\n    color: purple,\n  },\n  {\n    text: \"Room6\",\n    id: 6,\n    color: brown,\n  },\n];\nconst DrawBar = ({\n  time,\n  setTime,\n  resource,\n  setResource,\n  open,\n  setOpen,\n}: propType) => {\n  const [checked, setChecked] = useState([1, 2]);\n  const classes = useStyles();\n  function setRoom(id: number, check: boolean) {\n    if (id) {\n      const buffer = [...resource].flat();\n      if (!check)\n        setResource([\n          {\n            fieldName: \"roomId\",\n            title: \"Room Name\",\n            instances: buffer[0].instances.filter((e: any) => e.id !== id).length\n              ? buffer[0].instances.filter((e: any) => e.id !== id)\n              : [{ text: \"Room\", id: 7, color: blue }],\n          },\n          {\n            fieldName: \"members\",\n            title: \"Members\",\n            instances: buffer[1].instances,\n            allowMultiple: true,\n          },\n        ]);\n      else {\n        setResource([\n          {\n            fieldName: \"roomId\",\n            title: \"Room Name\",\n            instances: [...buffer[0].instances, instance[--id]].sort(\n              (a, b) => a.id - b.id\n            ).filter((e: any) => e.id !== 7),\n          },\n          {\n            fieldName: \"members\",\n            title: \"Members\",\n            instances: buffer[1].instances,\n            allowMultiple: true,\n          },\n        ]);\n      }\n    } else {\n      if (!check)\n        setResource([\n          {\n            fieldName: \"roomId\",\n            title: \"Room Name\",\n            instances: [{ text: \"Room\", id: 7, color: blue }],\n          },\n          {\n            fieldName: \"members\",\n            title: \"Members\",\n            instances: resource[1].instances,\n            allowMultiple: true,\n          },\n        ]);\n      else\n        setResource([\n          {\n            fieldName: \"roomId\",\n            title: \"Room Name\",\n            instances: instance,\n          },\n          {\n            fieldName: \"members\",\n            title: \"Members\",\n            instances: resource[1].instances,\n            allowMultiple: true,\n          },\n        ]);\n    }\n  }\n  function checkExit(id: number) {\n    let buffer = false;\n    resource[0].instances.forEach((res: any) => {\n      if (res.id === id) buffer = true;\n    });\n    return buffer;\n  }\n\n  return open ? (\n    <Grid\n      id=\"smallCalendar\"\n      item\n      xs={open ? 5 : \"auto\"}\n      md={open ? 3 : \"auto\"}\n      lg={open ? 2 : \"auto\"}\n      className={classes.calender}\n    >\n      <MuiPickersUtilsProvider utils={MomentUtils}>\n        <Button\n          className={classes.menuButton}\n          fullWidth\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => {\n            setOpen(false);\n          }}\n        >\n          <ChevronLeftIcon />\n        </Button>\n        <Calendar\n          date={time}\n          onChange={(data: any) => {\n            setTime(data);\n          }}\n        />\n        {/* <FormControl component=\"fieldset\" className={classes.formControl}>\n          <FormLabel component=\"legend\">My meeting</FormLabel>\n          <FormGroup>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checked.length === 2}\n                  indeterminate={checked.length > 0 && checked.length < 2}\n                  onChange={() => {\n                    if (checked.length !== 2)\n                      setResource([\n                        {\n                          fieldName: \"roomId\",\n                          title: \"Room Name\",\n                          instances: resource[0].instances,\n                        },\n                        {\n                          fieldName: \"members\",\n                          title: \"Members\",\n                          instances: [],\n                          allowMultiple: true,\n                        },\n                      ]);\n                    else\n                      setResource([\n                        {\n                          fieldName: \"roomId\",\n                          title: \"Room Name\",\n                          instances: resource[0].instances,\n                        },\n                        {\n                          fieldName: \"members\",\n                          title: \"Members\",\n                          instances: person,\n                          allowMultiple: true,\n                        },\n                      ]);\n                  }}\n                  name=\"all\"\n                />\n              }\n              label=\"All\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checked.indexOf(1) !== -1}\n                  onChange={(e) => {\n                    if (!e.target.checked)\n                      setResource([\n                        {\n                          fieldName: \"roomId\",\n                          title: \"Room Name\",\n                          instances: resource[0].instances,\n                        },\n                        {\n                          fieldName: \"members\",\n                          title: \"Members\",\n                          instances: resource[0].instances.filter(\n                            (e: any) => e.id !== 1\n                          ),\n                          allowMultiple: true,\n                        },\n                      ]);\n                    else\n                      setResource([\n                        {\n                          fieldName: \"roomId\",\n                          title: \"Room Name\",\n                          instances: resource[0].instances,\n                        },\n                        {\n                          fieldName: \"members\",\n                          title: \"Members\",\n                          instances: [...resource[0].instances, person[0]].sort(\n                            (a, b) => a.id - b.id\n                          ),\n                          allowMultiple: true,\n                        },\n                      ]);\n                  }}\n                  name=\"myMeet\"\n                />\n              }\n              label=\"My Meetting\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checked.indexOf(2) !== -1}\n                  onChange={(e) => {\n                    if (!e.target.checked)\n                      setResource([\n                        {\n                          fieldName: \"roomId\",\n                          title: \"Room Name\",\n                          instances: resource[0].instances,\n                        },\n                        {\n                          fieldName: \"members\",\n                          title: \"Members\",\n                          instances: resource[0].instances.filter(\n                            (e: any) => e.id !== 2\n                          ),\n                          allowMultiple: true,\n                        },\n                      ]);\n                    else\n                      setResource([\n                        {\n                          fieldName: \"roomId\",\n                          title: \"Room Name\",\n                          instances: resource[0].instances,\n                        },\n                        {\n                          fieldName: \"members\",\n                          title: \"Members\",\n                          instances: [...resource[0].instances, person[1]].sort(\n                            (a, b) => a.id - b.id\n                          ),\n                          allowMultiple: true,\n                        },\n                      ]);\n                  }}\n                  name=\"otherMeet\"\n                />\n              }\n              label=\"Other Meetting\"\n            />\n          </FormGroup>\n        </FormControl> */}\n        <FormControl\n          component=\"fieldset\"\n          className={classes.formControl}\n          style={{ marginTop: \"12px\" }}\n        >\n          <FormLabel component=\"legend\">Room</FormLabel>\n          <FormGroup>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={resource[0].instances.length === 6}\n                  indeterminate={\n                    resource[0].instances.length > 0 &&\n                    resource[0].instances.length < 6\n                  }\n                  onChange={(e) => setRoom(0, e.target.checked)}\n                  name=\"all\"\n                />\n              }\n              label=\"All Rooms\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checkExit(1)}\n                  onChange={(e) => setRoom(1, e.target.checked)}\n                  name=\"room1\"\n                />\n              }\n              label=\"Room 1\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checkExit(2)}\n                  onChange={(e) => setRoom(2, e.target.checked)}\n                  name=\"room2\"\n                />\n              }\n              label=\"Room 2\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checkExit(3)}\n                  onChange={(e) => setRoom(3, e.target.checked)}\n                  name=\"room3\"\n                />\n              }\n              label=\"Room 3\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checkExit(4)}\n                  onChange={(e) => setRoom(4, e.target.checked)}\n                  name=\"room4\"\n                />\n              }\n              label=\"Room 4\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checkExit(5)}\n                  onChange={(e) => setRoom(5, e.target.checked)}\n                  name=\"room5\"\n                />\n              }\n              label=\"Room 5\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checkExit(6)}\n                  onChange={(e) => setRoom(6, e.target.checked)}\n                  name=\"room6\"\n                />\n              }\n              label=\"Room 6\"\n            />\n          </FormGroup>\n        </FormControl>\n      </MuiPickersUtilsProvider>\n    </Grid>\n  ) : (\n    <></>\n  );\n};\nexport default DrawBar;\n","/Users/okesseko/Documents/GitHub/software-calender/src/component/home.tsx",["56"],"import * as React from \"react\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\nimport Reservation from \"./reservation\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider, Calendar } from \"@material-ui/pickers\";\nimport { useState } from \"react\";\nimport moment from \"moment\";\nimport DrawBar from \"./drawBar\";\nimport {\n  blue,\n  brown,\n  green,\n  orange,\n  purple,\n  red,\n  teal,\n  indigo,\n} from \"@material-ui/core/colors\";\nconst useStyles = makeStyles((theme) => ({\n  calender: {\n    padding: `0 ${theme.spacing(2)}px`,\n    zIndex: 50,\n  },\n  calenderCustom: {\n    zIndex: 100,\n  },\n}));\nconst resources = [\n  {\n    fieldName: \"roomId\",\n    title: \"Room Name\",\n    instances: [\n      { text: \"Room1\", id: 1, color: blue },\n      { text: \"Room2\", id: 2, color: orange },\n      { text: \"Room3\", id: 3, color: green },\n      { text: \"Room4\", id: 4, color: purple },\n      { text: \"Room5\", id: 5, color: red },\n      { text: \"Room6\", id: 6, color: brown },\n    ],\n  },\n  {\n    fieldName: \"members\",\n    title: \"Members\",\n    instances: [\n      {\n        text: \"Me\",\n        id: 1,\n        color: indigo,\n      },\n      {\n        text: \"Arnie\",\n        id: 2,\n        color: teal,\n      },\n    ],\n    allowMultiple: true,\n  },\n];\nconst Home = () => {\n  const [selectedDate, setSelectedDate] = useState(moment());\n  const [resource, setResource] = useState(resources);\n  const [openDrawer, setopenDrawer] = useState(true);\n  const classes = useStyles();\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <Grid container>\n        <DrawBar\n          time={selectedDate}\n          setTime={setSelectedDate}\n          resource={resource}\n          setResource={setResource}\n          open={openDrawer}\n          setOpen={setopenDrawer}\n        />\n        <Grid\n          item\n          xs={openDrawer ? 7 : 12}\n          md={openDrawer ? 9 : 12}\n          lg={openDrawer ? 10 : 12}\n          className={classes.calenderCustom}\n        >\n          <Reservation\n            currenTime={selectedDate}\n            setCurrenTime={setSelectedDate}\n            resource={resource}\n            open={openDrawer}\n            setOpen={setopenDrawer}\n          />\n        </Grid>\n      </Grid>\n    </MuiPickersUtilsProvider>\n  );\n};\nexport default Home;\n","/Users/okesseko/Documents/GitHub/software-calender/src/component/personal.tsx",["57","58","59","60","61","62"],"import React, { useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport { Form, Formik, Field } from \"formik\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { TextField } from \"formik-material-ui\";\nimport { CircularProgress, Grid, Snackbar } from \"@material-ui/core\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\ninterface login {\n  oldpassword: string;\n  newpassword: string;\n}\nconst useStyles = makeStyles((theme) => ({\n  contain: {\n    paddingTop: theme.spacing(8),\n  },\n  message: {\n    backgroundColor: \"#f44336\",\n  },\n  paper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\nconst PersonalPage = () => {\n  const classes = useStyles();\n  const [message, setMessage] = useState<string>(\"\");\n  const [showMessage, setShowMessage] = useState<boolean>(false);\n  return (\n    <Container component=\"main\" maxWidth=\"xs\" className={classes.contain}>\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <AccountCircleIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Change Password\n        </Typography>\n        <Formik\n          initialValues={{\n            oldpassword: \"\",\n            newpassword: \"\",\n          }}\n          validate={(values) => {\n            const errors: Partial<login> = {};\n            if (!values.newpassword) {\n              errors.newpassword = \"Required\";\n            }\n\n            if (values.oldpassword !== \"test\") {\n              errors.oldpassword = \"Old Password was warn\";\n            }\n            if (!values.oldpassword) {\n              errors.oldpassword = \"Required\";\n            }\n            return errors;\n          }}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            window.location.replace(\"/\");\n          }}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              {message && <Alert severity=\"error\">{message}</Alert>}\n              <Field\n                component={TextField}\n                fullWidth\n                required\n                label=\"Old Password\"\n                name=\"oldpassword\"\n              />\n              <Field\n                component={TextField}\n                fullWidth\n                required\n                label=\"New Password\"\n                name=\"newpassword\"\n              />\n              <Grid container spacing={2}>\n                <Grid item xs={6}>\n                  <Button\n                    variant=\"contained\"\n                    fullWidth\n                    color=\"inherit\"\n                    className={classes.submit}\n                    onClick={() => {\n                      window.location.replace(\"/\");\n                    }}\n                  >\n                    Back\n                  </Button>\n                </Grid>\n                <Grid item xs={6}>\n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={isSubmitting}\n                    className={classes.submit}\n                  >\n                    {isSubmitting ? (\n                      <CircularProgress color=\"secondary\" />\n                    ) : (\n                      \"Chang\"\n                    )}\n                  </Button>\n                </Grid>\n              </Grid>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </Container>\n  );\n};\n\nexport default PersonalPage;\n",{"ruleId":"63","severity":1,"message":"64","line":33,"column":10,"nodeType":"65","messageId":"66","endLine":33,"endColumn":15},{"ruleId":"63","severity":1,"message":"67","line":10,"column":8,"nodeType":"65","messageId":"66","endLine":10,"endColumn":15},{"ruleId":"63","severity":1,"message":"68","line":13,"column":3,"nodeType":"65","messageId":"66","endLine":13,"endColumn":11},{"ruleId":"63","severity":1,"message":"69","line":14,"column":3,"nodeType":"65","messageId":"66","endLine":14,"endColumn":12},{"ruleId":"63","severity":1,"message":"70","line":17,"column":3,"nodeType":"65","messageId":"66","endLine":17,"endColumn":16},{"ruleId":"63","severity":1,"message":"71","line":18,"column":3,"nodeType":"65","messageId":"66","endLine":18,"endColumn":15},{"ruleId":"63","severity":1,"message":"72","line":22,"column":3,"nodeType":"65","messageId":"66","endLine":22,"endColumn":14},{"ruleId":"63","severity":1,"message":"73","line":24,"column":3,"nodeType":"65","messageId":"66","endLine":24,"endColumn":21},{"ruleId":"63","severity":1,"message":"74","line":28,"column":3,"nodeType":"65","messageId":"66","endLine":28,"endColumn":23},{"ruleId":"63","severity":1,"message":"75","line":32,"column":10,"nodeType":"65","messageId":"66","endLine":32,"endColumn":19},{"ruleId":"63","severity":1,"message":"76","line":34,"column":10,"nodeType":"65","messageId":"66","endLine":34,"endColumn":16},{"ruleId":"63","severity":1,"message":"77","line":34,"column":18,"nodeType":"65","messageId":"66","endLine":34,"endColumn":21},{"ruleId":"63","severity":1,"message":"78","line":111,"column":10,"nodeType":"65","messageId":"66","endLine":111,"endColumn":21},{"ruleId":"63","severity":1,"message":"79","line":111,"column":23,"nodeType":"65","messageId":"66","endLine":111,"endColumn":37},{"ruleId":"63","severity":1,"message":"80","line":112,"column":10,"nodeType":"65","messageId":"66","endLine":112,"endColumn":13},{"ruleId":"63","severity":1,"message":"81","line":5,"column":3,"nodeType":"65","messageId":"66","endLine":5,"endColumn":10},{"ruleId":"63","severity":1,"message":"82","line":6,"column":3,"nodeType":"65","messageId":"66","endLine":6,"endColumn":9},{"ruleId":"63","severity":1,"message":"83","line":12,"column":3,"nodeType":"65","messageId":"66","endLine":12,"endColumn":13},{"ruleId":"63","severity":1,"message":"75","line":17,"column":10,"nodeType":"65","messageId":"66","endLine":17,"endColumn":19},{"ruleId":"63","severity":1,"message":"84","line":53,"column":7,"nodeType":"65","messageId":"66","endLine":53,"endColumn":13},{"ruleId":"63","severity":1,"message":"85","line":105,"column":10,"nodeType":"65","messageId":"66","endLine":105,"endColumn":17},{"ruleId":"63","severity":1,"message":"86","line":105,"column":19,"nodeType":"65","messageId":"66","endLine":105,"endColumn":29},{"ruleId":"63","severity":1,"message":"87","line":5,"column":35,"nodeType":"65","messageId":"66","endLine":5,"endColumn":43},{"ruleId":"63","severity":1,"message":"88","line":5,"column":8,"nodeType":"65","messageId":"66","endLine":5,"endColumn":24},{"ruleId":"63","severity":1,"message":"89","line":10,"column":34,"nodeType":"65","messageId":"66","endLine":10,"endColumn":42},{"ruleId":"63","severity":1,"message":"90","line":11,"column":8,"nodeType":"65","messageId":"66","endLine":11,"endColumn":16},{"ruleId":"63","severity":1,"message":"91","line":40,"column":19,"nodeType":"65","messageId":"66","endLine":40,"endColumn":29},{"ruleId":"63","severity":1,"message":"92","line":41,"column":10,"nodeType":"65","messageId":"66","endLine":41,"endColumn":21},{"ruleId":"63","severity":1,"message":"93","line":41,"column":23,"nodeType":"65","messageId":"66","endLine":41,"endColumn":37},"@typescript-eslint/no-unused-vars","'login' is assigned a value but never used.","Identifier","unusedVar","'AddIcon' is defined but never used.","'WeekView' is defined but never used.","'MonthView' is defined but never used.","'DateNavigator' is defined but never used.","'ViewSwitcher' is defined but never used.","'AllDayPanel' is defined but never used.","'EditRecurrenceMenu' is defined but never used.","'CurrentTimeIndicator' is defined but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","'Fab' is defined but never used.","'formVisible' is assigned a value but never used.","'setFormVisible' is assigned a value but never used.","'add' is assigned a value but never used.","'Divider' is defined but never used.","'Drawer' is defined but never used.","'IconButton' is defined but never used.","'person' is assigned a value but never used.","'checked' is assigned a value but never used.","'setChecked' is assigned a value but never used.","'Calendar' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'Snackbar' is defined but never used.","'MuiAlert' is defined but never used.","'setMessage' is assigned a value but never used.","'showMessage' is assigned a value but never used.","'setShowMessage' is assigned a value but never used."]